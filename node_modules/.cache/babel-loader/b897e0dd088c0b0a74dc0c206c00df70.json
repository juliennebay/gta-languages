{"ast":null,"code":"var _jsxFileName = \"/Users/julie/Documents/Code/gta-languages/react_app/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport TorontoData from \"./Toronto.json\"; //0: mother tongue\n//1: spoken at home\n//2: total speakers of this language (including those not included in 0 & 1)\n\nfunction App() {\n  const [selectedLanguage, setLanguage] = useState(\"\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, \"The # of speakers of a non-official (Eng/Fr) language in Toronto\"), /*#__PURE__*/React.createElement(\"input\", {\n    onChange: e => setLanguage(e.target.value.toLowerCase()),\n    placeholder: \"type language\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \"Mother tongue for the total population excluding institutional residents :\", \" \", TorontoData.filter(d => !d.TEXT_NAME_NOM.includes(\"English\") && !d.TEXT_NAME_NOM.includes(\"French\")).filter(d => d.TEXT_NAME_NOM.toLowerCase().includes(selectedLanguage)).map(d => JSON.stringify({\n    total: d.T_DATA_DONNEE,\n    ID: d.HIER_ID,\n    text_name_nom: d.TEXT_NAME_NOM,\n    label: TorontoData.find(obj => obj.HIER_ID === d.HIER_ID.slice(0, 5))\n  })).map((d, i) => /*#__PURE__*/React.createElement(\"div\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, d))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/julie/Documents/Code/gta-languages/react_app/src/App.js"],"names":["React","useState","TorontoData","App","selectedLanguage","setLanguage","e","target","value","toLowerCase","filter","d","TEXT_NAME_NOM","includes","map","JSON","stringify","total","T_DATA_DONNEE","ID","HIER_ID","text_name_nom","label","find","obj","slice","i"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;AACA;AACA;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,gBAAD,EAAmBC,WAAnB,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEADF,eAEE;AACE,IAAA,QAAQ,EAAEK,CAAC,IAAID,WAAW,CAACC,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,WAAf,EAAD,CAD5B;AAEE,IAAA,WAAW,EAAC,eAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAEI,GAFJ,EAGGP,WAAW,CAACQ,MAAZ,CACCC,CAAC,IACC,CAACA,CAAC,CAACC,aAAF,CAAgBC,QAAhB,CAAyB,SAAzB,CAAD,IACA,CAACF,CAAC,CAACC,aAAF,CAAgBC,QAAhB,CAAyB,QAAzB,CAHJ,EAKEH,MALF,CAKSC,CAAC,IAAIA,CAAC,CAACC,aAAF,CAAgBH,WAAhB,GAA8BI,QAA9B,CAAuCT,gBAAvC,CALd,EAMEU,GANF,CAMMH,CAAC,IACJI,IAAI,CAACC,SAAL,CAAe;AACbC,IAAAA,KAAK,EAAEN,CAAC,CAACO,aADI;AAEbC,IAAAA,EAAE,EAAER,CAAC,CAACS,OAFO;AAGbC,IAAAA,aAAa,EAAEV,CAAC,CAACC,aAHJ;AAIbU,IAAAA,KAAK,EAAEpB,WAAW,CAACqB,IAAZ,CACLC,GAAG,IAAIA,GAAG,CAACJ,OAAJ,KAAgBT,CAAC,CAACS,OAAF,CAAUK,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CADlB;AAJM,GAAf,CAPH,EAgBEX,GAhBF,CAgBM,CAACH,CAAD,EAAIe,CAAJ,kBACH;AAAK,IAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcf,CAAd,CAjBH,CAHH,CANF,CADF;AAgCD;;AAED,eAAeR,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TorontoData from \"./Toronto.json\";\n\n//0: mother tongue\n//1: spoken at home\n//2: total speakers of this language (including those not included in 0 & 1)\n\nfunction App() {\n  const [selectedLanguage, setLanguage] = useState(\"\");\n  return (\n    <div className=\"App\">\n      <h1>The # of speakers of a non-official (Eng/Fr) language in Toronto</h1>\n      <input\n        onChange={e => setLanguage(e.target.value.toLowerCase())}\n        placeholder=\"type language\"\n      ></input>\n      <div>\n        Mother tongue for the total population excluding institutional residents\n        :{\" \"}\n        {TorontoData.filter(\n          d =>\n            !d.TEXT_NAME_NOM.includes(\"English\") &&\n            !d.TEXT_NAME_NOM.includes(\"French\")\n        )\n          .filter(d => d.TEXT_NAME_NOM.toLowerCase().includes(selectedLanguage))\n          .map(d =>\n            JSON.stringify({\n              total: d.T_DATA_DONNEE,\n              ID: d.HIER_ID,\n              text_name_nom: d.TEXT_NAME_NOM,\n              label: TorontoData.find(\n                obj => obj.HIER_ID === d.HIER_ID.slice(0, 5)\n              )\n            })\n          )\n          .map((d, i) => (\n            <div key={i}>{d}</div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}